// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source usecase.go -destination mocks/mocks.go -typed true
//
// Package mock_core is a generated GoMock package.
package mock_core

import (
	context "context"
	reflect "reflect"

	model "github.com/glebziz/fs_db/internal/model"
	transactor "github.com/glebziz/fs_db/internal/model/transactor"
	gomock "go.uber.org/mock/gomock"
)

// MockfileRepository is a mock of fileRepository interface.
type MockfileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockfileRepositoryMockRecorder
}

// MockfileRepositoryMockRecorder is the mock recorder for MockfileRepository.
type MockfileRepositoryMockRecorder struct {
	mock *MockfileRepository
}

// NewMockfileRepository creates a new mock instance.
func NewMockfileRepository(ctrl *gomock.Controller) *MockfileRepository {
	mock := &MockfileRepository{ctrl: ctrl}
	mock.recorder = &MockfileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfileRepository) EXPECT() *MockfileRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockfileRepository) GetAll(ctx context.Context) ([]model.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]model.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockfileRepositoryMockRecorder) GetAll(ctx any) *fileRepositoryGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockfileRepository)(nil).GetAll), ctx)
	return &fileRepositoryGetAllCall{Call: call}
}

// fileRepositoryGetAllCall wrap *gomock.Call
type fileRepositoryGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *fileRepositoryGetAllCall) Return(arg0 []model.File, arg1 error) *fileRepositoryGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *fileRepositoryGetAllCall) Do(f func(context.Context) ([]model.File, error)) *fileRepositoryGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *fileRepositoryGetAllCall) DoAndReturn(f func(context.Context) ([]model.File, error)) *fileRepositoryGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunTransaction mocks base method.
func (m *MockfileRepository) RunTransaction(ctx context.Context, fn transactor.TransactionFn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockfileRepositoryMockRecorder) RunTransaction(ctx, fn any) *fileRepositoryRunTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockfileRepository)(nil).RunTransaction), ctx, fn)
	return &fileRepositoryRunTransactionCall{Call: call}
}

// fileRepositoryRunTransactionCall wrap *gomock.Call
type fileRepositoryRunTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *fileRepositoryRunTransactionCall) Return(arg0 error) *fileRepositoryRunTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *fileRepositoryRunTransactionCall) Do(f func(context.Context, transactor.TransactionFn) error) *fileRepositoryRunTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *fileRepositoryRunTransactionCall) DoAndReturn(f func(context.Context, transactor.TransactionFn) error) *fileRepositoryRunTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Set mocks base method.
func (m *MockfileRepository) Set(ctx context.Context, file model.File) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockfileRepositoryMockRecorder) Set(ctx, file any) *fileRepositorySetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockfileRepository)(nil).Set), ctx, file)
	return &fileRepositorySetCall{Call: call}
}

// fileRepositorySetCall wrap *gomock.Call
type fileRepositorySetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *fileRepositorySetCall) Return(arg0 error) *fileRepositorySetCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *fileRepositorySetCall) Do(f func(context.Context, model.File) error) *fileRepositorySetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *fileRepositorySetCall) DoAndReturn(f func(context.Context, model.File) error) *fileRepositorySetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
