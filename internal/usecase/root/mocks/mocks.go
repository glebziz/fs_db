// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source usecase.go -destination mocks/mocks.go -typed true
//
// Package mock_root is a generated GoMock package.
package mock_root

import (
	context "context"
	model "github.com/glebziz/fs_db/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockdiskManager is a mock of diskManager interface.
type MockdiskManager struct {
	ctrl     *gomock.Controller
	recorder *MockdiskManagerMockRecorder
}

// MockdiskManagerMockRecorder is the mock recorder for MockdiskManager.
type MockdiskManagerMockRecorder struct {
	mock *MockdiskManager
}

// NewMockdiskManager creates a new mock instance.
func NewMockdiskManager(ctrl *gomock.Controller) *MockdiskManager {
	mock := &MockdiskManager{ctrl: ctrl}
	mock.recorder = &MockdiskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiskManager) EXPECT() *MockdiskManagerMockRecorder {
	return m.recorder
}

// Usage mocks base method.
func (m *MockdiskManager) Usage(ctx context.Context, path string) (*model.Stat, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Usage", ctx, path)
	ret0, _ := ret[0].(*model.Stat)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Usage indicates an expected call of Usage.
func (mr *MockdiskManagerMockRecorder) Usage(ctx, path any) *diskManagerUsageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Usage", reflect.TypeOf((*MockdiskManager)(nil).Usage), ctx, path)
	return &diskManagerUsageCall{Call: call}
}

// diskManagerUsageCall wrap *gomock.Call
type diskManagerUsageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *diskManagerUsageCall) Return(arg0 *model.Stat, arg1 error) *diskManagerUsageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *diskManagerUsageCall) Do(f func(context.Context, string) (*model.Stat, error)) *diskManagerUsageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *diskManagerUsageCall) DoAndReturn(f func(context.Context, string) (*model.Stat, error)) *diskManagerUsageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockdirRepository is a mock of dirRepository interface.
type MockdirRepository struct {
	ctrl     *gomock.Controller
	recorder *MockdirRepositoryMockRecorder
}

// MockdirRepositoryMockRecorder is the mock recorder for MockdirRepository.
type MockdirRepositoryMockRecorder struct {
	mock *MockdirRepository
}

// NewMockdirRepository creates a new mock instance.
func NewMockdirRepository(ctrl *gomock.Controller) *MockdirRepository {
	mock := &MockdirRepository{ctrl: ctrl}
	mock.recorder = &MockdirRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdirRepository) EXPECT() *MockdirRepositoryMockRecorder {
	return m.recorder
}

// CountByParent mocks base method.
func (m *MockdirRepository) CountByParent(ctx context.Context, parent string) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByParent", ctx, parent)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountByParent indicates an expected call of CountByParent.
func (mr *MockdirRepositoryMockRecorder) CountByParent(ctx, parent any) *dirRepositoryCountByParentCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByParent", reflect.TypeOf((*MockdirRepository)(nil).CountByParent), ctx, parent)
	return &dirRepositoryCountByParentCall{Call: call}
}

// dirRepositoryCountByParentCall wrap *gomock.Call
type dirRepositoryCountByParentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *dirRepositoryCountByParentCall) Return(arg0 uint64, arg1 error) *dirRepositoryCountByParentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *dirRepositoryCountByParentCall) Do(f func(context.Context, string) (uint64, error)) *dirRepositoryCountByParentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *dirRepositoryCountByParentCall) DoAndReturn(f func(context.Context, string) (uint64, error)) *dirRepositoryCountByParentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
