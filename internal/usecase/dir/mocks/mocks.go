// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go
//
// Generated by this command:
//
//	mockgen -source usecase.go -destination mocks/mocks.go -typed true
//
// Package mock_dir is a generated GoMock package.
package mock_dir

import (
	context "context"
	reflect "reflect"

	model "github.com/glebziz/fs_db/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockdirRepository is a mock of dirRepository interface.
type MockdirRepository struct {
	ctrl     *gomock.Controller
	recorder *MockdirRepositoryMockRecorder
}

// MockdirRepositoryMockRecorder is the mock recorder for MockdirRepository.
type MockdirRepositoryMockRecorder struct {
	mock *MockdirRepository
}

// NewMockdirRepository creates a new mock instance.
func NewMockdirRepository(ctrl *gomock.Controller) *MockdirRepository {
	mock := &MockdirRepository{ctrl: ctrl}
	mock.recorder = &MockdirRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdirRepository) EXPECT() *MockdirRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockdirRepository) Create(ctx context.Context, d model.Dir) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockdirRepositoryMockRecorder) Create(ctx, d any) *dirRepositoryCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockdirRepository)(nil).Create), ctx, d)
	return &dirRepositoryCreateCall{Call: call}
}

// dirRepositoryCreateCall wrap *gomock.Call
type dirRepositoryCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *dirRepositoryCreateCall) Return(arg0 error) *dirRepositoryCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *dirRepositoryCreateCall) Do(f func(context.Context, model.Dir) error) *dirRepositoryCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *dirRepositoryCreateCall) DoAndReturn(f func(context.Context, model.Dir) error) *dirRepositoryCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockdirRepository) Get(ctx context.Context) (model.Dirs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].(model.Dirs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockdirRepositoryMockRecorder) Get(ctx any) *dirRepositoryGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdirRepository)(nil).Get), ctx)
	return &dirRepositoryGetCall{Call: call}
}

// dirRepositoryGetCall wrap *gomock.Call
type dirRepositoryGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *dirRepositoryGetCall) Return(arg0 model.Dirs, arg1 error) *dirRepositoryGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *dirRepositoryGetCall) Do(f func(context.Context) (model.Dirs, error)) *dirRepositoryGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *dirRepositoryGetCall) DoAndReturn(f func(context.Context) (model.Dirs, error)) *dirRepositoryGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRoots mocks base method.
func (m *MockdirRepository) GetRoots(ctx context.Context) ([]model.Root, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoots", ctx)
	ret0, _ := ret[0].([]model.Root)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoots indicates an expected call of GetRoots.
func (mr *MockdirRepositoryMockRecorder) GetRoots(ctx any) *dirRepositoryGetRootsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoots", reflect.TypeOf((*MockdirRepository)(nil).GetRoots), ctx)
	return &dirRepositoryGetRootsCall{Call: call}
}

// dirRepositoryGetRootsCall wrap *gomock.Call
type dirRepositoryGetRootsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *dirRepositoryGetRootsCall) Return(arg0 []model.Root, arg1 error) *dirRepositoryGetRootsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *dirRepositoryGetRootsCall) Do(f func(context.Context) ([]model.Root, error)) *dirRepositoryGetRootsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *dirRepositoryGetRootsCall) DoAndReturn(f func(context.Context) ([]model.Root, error)) *dirRepositoryGetRootsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockdirRepository) Remove(ctx context.Context, d model.Dir) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockdirRepositoryMockRecorder) Remove(ctx, d any) *dirRepositoryRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockdirRepository)(nil).Remove), ctx, d)
	return &dirRepositoryRemoveCall{Call: call}
}

// dirRepositoryRemoveCall wrap *gomock.Call
type dirRepositoryRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *dirRepositoryRemoveCall) Return(arg0 error) *dirRepositoryRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *dirRepositoryRemoveCall) Do(f func(context.Context, model.Dir) error) *dirRepositoryRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *dirRepositoryRemoveCall) DoAndReturn(f func(context.Context, model.Dir) error) *dirRepositoryRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Mockgenerator is a mock of generator interface.
type Mockgenerator struct {
	ctrl     *gomock.Controller
	recorder *MockgeneratorMockRecorder
}

// MockgeneratorMockRecorder is the mock recorder for Mockgenerator.
type MockgeneratorMockRecorder struct {
	mock *Mockgenerator
}

// NewMockgenerator creates a new mock instance.
func NewMockgenerator(ctrl *gomock.Controller) *Mockgenerator {
	mock := &Mockgenerator{ctrl: ctrl}
	mock.recorder = &MockgeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockgenerator) EXPECT() *MockgeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *Mockgenerator) Generate() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(string)
	return ret0
}

// Generate indicates an expected call of Generate.
func (mr *MockgeneratorMockRecorder) Generate() *generatorGenerateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*Mockgenerator)(nil).Generate))
	return &generatorGenerateCall{Call: call}
}

// generatorGenerateCall wrap *gomock.Call
type generatorGenerateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *generatorGenerateCall) Return(arg0 string) *generatorGenerateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *generatorGenerateCall) Do(f func() string) *generatorGenerateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *generatorGenerateCall) DoAndReturn(f func() string) *generatorGenerateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
