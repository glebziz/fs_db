// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go
//
// Generated by this command:
//
//	mockgen -source helper.go -destination mocks/mocks.go -typed true
//
// Package mock_streamwriter is a generated GoMock package.
package mock_streamwriter

import (
	reflect "reflect"

	streamwriter "github.com/glebziz/fs_db/internal/utils/grpc/streamwriter"
	gomock "go.uber.org/mock/gomock"
)

// MockStreamTest is a mock of StreamTest interface.
type MockStreamTest struct {
	ctrl     *gomock.Controller
	recorder *MockStreamTestMockRecorder
}

// MockStreamTestMockRecorder is the mock recorder for MockStreamTest.
type MockStreamTestMockRecorder struct {
	mock *MockStreamTest
}

// NewMockStreamTest creates a new mock instance.
func NewMockStreamTest(ctrl *gomock.Controller) *MockStreamTest {
	mock := &MockStreamTest{ctrl: ctrl}
	mock.recorder = &MockStreamTestMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamTest) EXPECT() *MockStreamTestMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method.
func (m *MockStreamTest) CloseAndRecv() (*streamwriter.TestRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*streamwriter.TestRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv.
func (mr *MockStreamTestMockRecorder) CloseAndRecv() *StreamTestCloseAndRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockStreamTest)(nil).CloseAndRecv))
	return &StreamTestCloseAndRecvCall{Call: call}
}

// StreamTestCloseAndRecvCall wrap *gomock.Call
type StreamTestCloseAndRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StreamTestCloseAndRecvCall) Return(arg0 *streamwriter.TestRequest, arg1 error) *StreamTestCloseAndRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StreamTestCloseAndRecvCall) Do(f func() (*streamwriter.TestRequest, error)) *StreamTestCloseAndRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StreamTestCloseAndRecvCall) DoAndReturn(f func() (*streamwriter.TestRequest, error)) *StreamTestCloseAndRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Send mocks base method.
func (m *MockStreamTest) Send(req *streamwriter.TestRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockStreamTestMockRecorder) Send(req any) *StreamTestSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockStreamTest)(nil).Send), req)
	return &StreamTestSendCall{Call: call}
}

// StreamTestSendCall wrap *gomock.Call
type StreamTestSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StreamTestSendCall) Return(arg0 error) *StreamTestSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StreamTestSendCall) Do(f func(*streamwriter.TestRequest) error) *StreamTestSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StreamTestSendCall) DoAndReturn(f func(*streamwriter.TestRequest) error) *StreamTestSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
